// Code generated by protoc-gen-go. DO NOT EDIT.
// source: category/pkg/grpc/pb/category.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetByNameRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetByNameRequest) Reset()         { *m = GetByNameRequest{} }
func (m *GetByNameRequest) String() string { return proto.CompactTextString(m) }
func (*GetByNameRequest) ProtoMessage()    {}
func (*GetByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e162de7488101df, []int{0}
}

func (m *GetByNameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetByNameRequest.Unmarshal(m, b)
}
func (m *GetByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetByNameRequest.Marshal(b, m, deterministic)
}
func (m *GetByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByNameRequest.Merge(m, src)
}
func (m *GetByNameRequest) XXX_Size() int {
	return xxx_messageInfo_GetByNameRequest.Size(m)
}
func (m *GetByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetByNameRequest proto.InternalMessageInfo

type GetByNameReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetByNameReply) Reset()         { *m = GetByNameReply{} }
func (m *GetByNameReply) String() string { return proto.CompactTextString(m) }
func (*GetByNameReply) ProtoMessage()    {}
func (*GetByNameReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e162de7488101df, []int{1}
}

func (m *GetByNameReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetByNameReply.Unmarshal(m, b)
}
func (m *GetByNameReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetByNameReply.Marshal(b, m, deterministic)
}
func (m *GetByNameReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByNameReply.Merge(m, src)
}
func (m *GetByNameReply) XXX_Size() int {
	return xxx_messageInfo_GetByNameReply.Size(m)
}
func (m *GetByNameReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByNameReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetByNameReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetByNameRequest)(nil), "pb.GetByNameRequest")
	proto.RegisterType((*GetByNameReply)(nil), "pb.GetByNameReply")
}

func init() {
	proto.RegisterFile("category/pkg/grpc/pb/category.proto", fileDescriptor_2e162de7488101df)
}

var fileDescriptor_2e162de7488101df = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0x4e, 0x2c, 0x49,
	0x4d, 0xcf, 0x2f, 0xaa, 0xd4, 0x2f, 0xc8, 0x4e, 0xd7, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x2f, 0x48,
	0xd2, 0x87, 0x09, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x31, 0x15, 0x24, 0x29, 0x09, 0x71,
	0x09, 0xb8, 0xa7, 0x96, 0x38, 0x55, 0xfa, 0x25, 0xe6, 0xa6, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16,
	0x97, 0x28, 0x09, 0x70, 0xf1, 0x21, 0x89, 0x15, 0xe4, 0x54, 0x1a, 0x39, 0x72, 0x71, 0x38, 0x43,
	0xf5, 0x0a, 0x99, 0x72, 0x71, 0xc2, 0x65, 0x85, 0x44, 0xf4, 0x0a, 0x92, 0xf4, 0xd0, 0x0d, 0x90,
	0x12, 0x42, 0x13, 0x2d, 0xc8, 0xa9, 0x4c, 0x62, 0x03, 0xdb, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xf7, 0xcb, 0xb5, 0xf0, 0x9a, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CategoryClient is the client API for Category service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CategoryClient interface {
	GetByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*GetByNameReply, error)
}

type categoryClient struct {
	cc *grpc.ClientConn
}

func NewCategoryClient(cc *grpc.ClientConn) CategoryClient {
	return &categoryClient{cc}
}

func (c *categoryClient) GetByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*GetByNameReply, error) {
	out := new(GetByNameReply)
	err := c.cc.Invoke(ctx, "/pb.Category/GetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServer is the server API for Category service.
type CategoryServer interface {
	GetByName(context.Context, *GetByNameRequest) (*GetByNameReply, error)
}

// UnimplementedCategoryServer can be embedded to have forward compatible implementations.
type UnimplementedCategoryServer struct {
}

func (*UnimplementedCategoryServer) GetByName(ctx context.Context, req *GetByNameRequest) (*GetByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}

func RegisterCategoryServer(s *grpc.Server, srv CategoryServer) {
	s.RegisterService(&_Category_serviceDesc, srv)
}

func _Category_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Category/GetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).GetByName(ctx, req.(*GetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Category_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Category",
	HandlerType: (*CategoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByName",
			Handler:    _Category_GetByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "category/pkg/grpc/pb/category.proto",
}
